// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kaiko.proto

package kaiko

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExistsResponse_Exists int32

const (
	ExistsResponse_UNKNOWN ExistsResponse_Exists = 0
	ExistsResponse_YES     ExistsResponse_Exists = 1
	ExistsResponse_NO      ExistsResponse_Exists = 2
)

var ExistsResponse_Exists_name = map[int32]string{
	0: "UNKNOWN",
	1: "YES",
	2: "NO",
}

var ExistsResponse_Exists_value = map[string]int32{
	"UNKNOWN": 0,
	"YES":     1,
	"NO":      2,
}

func (x ExistsResponse_Exists) String() string {
	return proto.EnumName(ExistsResponse_Exists_name, int32(x))
}

func (ExistsResponse_Exists) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58f13dd66bd1d6f9, []int{1, 0}
}

type ExistsRequest struct {
	ExchangeCode         string   `protobuf:"bytes,1,opt,name=exchange_code,json=exchangeCode,proto3" json:"exchange_code,omitempty"`
	ExchangePairCode     string   `protobuf:"bytes,2,opt,name=exchange_pair_code,json=exchangePairCode,proto3" json:"exchange_pair_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistsRequest) Reset()         { *m = ExistsRequest{} }
func (m *ExistsRequest) String() string { return proto.CompactTextString(m) }
func (*ExistsRequest) ProtoMessage()    {}
func (*ExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f13dd66bd1d6f9, []int{0}
}

func (m *ExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistsRequest.Unmarshal(m, b)
}
func (m *ExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistsRequest.Marshal(b, m, deterministic)
}
func (m *ExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsRequest.Merge(m, src)
}
func (m *ExistsRequest) XXX_Size() int {
	return xxx_messageInfo_ExistsRequest.Size(m)
}
func (m *ExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsRequest proto.InternalMessageInfo

func (m *ExistsRequest) GetExchangeCode() string {
	if m != nil {
		return m.ExchangeCode
	}
	return ""
}

func (m *ExistsRequest) GetExchangePairCode() string {
	if m != nil {
		return m.ExchangePairCode
	}
	return ""
}

type ExistsResponse struct {
	Exists               ExistsResponse_Exists `protobuf:"varint,1,opt,name=exists,proto3,enum=kaiko.ExistsResponse_Exists" json:"exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExistsResponse) Reset()         { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()    {}
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f13dd66bd1d6f9, []int{1}
}

func (m *ExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistsResponse.Unmarshal(m, b)
}
func (m *ExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistsResponse.Marshal(b, m, deterministic)
}
func (m *ExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsResponse.Merge(m, src)
}
func (m *ExistsResponse) XXX_Size() int {
	return xxx_messageInfo_ExistsResponse.Size(m)
}
func (m *ExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsResponse proto.InternalMessageInfo

func (m *ExistsResponse) GetExists() ExistsResponse_Exists {
	if m != nil {
		return m.Exists
	}
	return ExistsResponse_UNKNOWN
}

func init() {
	proto.RegisterEnum("kaiko.ExistsResponse_Exists", ExistsResponse_Exists_name, ExistsResponse_Exists_value)
	proto.RegisterType((*ExistsRequest)(nil), "kaiko.ExistsRequest")
	proto.RegisterType((*ExistsResponse)(nil), "kaiko.ExistsResponse")
}

func init() {
	proto.RegisterFile("kaiko.proto", fileDescriptor_58f13dd66bd1d6f9)
}

var fileDescriptor_58f13dd66bd1d6f9 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4e, 0xcc, 0xcc,
	0xce, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x92, 0xb8, 0x78, 0x5d,
	0x2b, 0x32, 0x8b, 0x4b, 0x8a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x94, 0xb9, 0x78,
	0x53, 0x2b, 0x92, 0x33, 0x12, 0xf3, 0xd2, 0x53, 0xe3, 0x93, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x78, 0x60, 0x82, 0xce, 0xf9, 0x29, 0xa9, 0x42, 0x3a, 0x5c, 0x42, 0x70,
	0x45, 0x05, 0x89, 0x99, 0x45, 0x10, 0x95, 0x4c, 0x60, 0x95, 0x02, 0x30, 0x99, 0x80, 0xc4, 0xcc,
	0x22, 0x90, 0x6a, 0xa5, 0x3c, 0x2e, 0x3e, 0x98, 0x1d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42,
	0x26, 0x5c, 0x6c, 0xa9, 0x60, 0x11, 0xb0, 0xe9, 0x7c, 0x46, 0x32, 0x7a, 0x10, 0xa7, 0xa1, 0x2a,
	0x83, 0x71, 0xa1, 0x6a, 0x95, 0xd4, 0xb8, 0xd8, 0x20, 0x22, 0x42, 0xdc, 0x5c, 0xec, 0xa1, 0x7e,
	0xde, 0x7e, 0xfe, 0xe1, 0x7e, 0x02, 0x0c, 0x42, 0xec, 0x5c, 0xcc, 0x91, 0xae, 0xc1, 0x02, 0x8c,
	0x42, 0x6c, 0x5c, 0x4c, 0x7e, 0xfe, 0x02, 0x4c, 0x46, 0x0e, 0x5c, 0xac, 0xde, 0x20, 0xe3, 0x84,
	0xcc, 0xe1, 0x1a, 0x44, 0xd0, 0x2c, 0x00, 0xfb, 0x55, 0x4a, 0x14, 0xab, 0xb5, 0x4a, 0x0c, 0x49,
	0x6c, 0xe0, 0x30, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x07, 0x3c, 0xa6, 0x2b, 0x32, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KaikoClient is the client API for Kaiko service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KaikoClient interface {
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type kaikoClient struct {
	cc grpc.ClientConnInterface
}

func NewKaikoClient(cc grpc.ClientConnInterface) KaikoClient {
	return &kaikoClient{cc}
}

func (c *kaikoClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/kaiko.Kaiko/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaikoServer is the server API for Kaiko service.
type KaikoServer interface {
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
}

// UnimplementedKaikoServer can be embedded to have forward compatible implementations.
type UnimplementedKaikoServer struct {
}

func (*UnimplementedKaikoServer) Exists(ctx context.Context, req *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}

func RegisterKaikoServer(s *grpc.Server, srv KaikoServer) {
	s.RegisterService(&_Kaiko_serviceDesc, srv)
}

func _Kaiko_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaikoServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiko.Kaiko/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaikoServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kaiko_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaiko.Kaiko",
	HandlerType: (*KaikoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Kaiko_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiko.proto",
}
